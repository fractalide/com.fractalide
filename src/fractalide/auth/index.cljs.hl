(ns fractalide.auth.index
  (:require-macros
    [fractalide.vform.core :refer [defv]])
  (:require
    [castra.core :refer [mkremote]]
    [fractalide.news-layout :as news-layout]
    [fractalide.auth.rpc :refer [create-auth-token auth-token
                                 set-token
                                  add-user! add-user-reply]]))

(defc form-login-username "")
(defc form-login-password "")
(defc form-signup-username "")
(defc form-signup-password "")

(defn validate-presence [v] (seq v))
(defn validate-regexp [r]
  (fn [v] (re-matches r (or v ""))))

(defv form-login-username-valid? form-login-username validate-presence)
(defv form-login-password-valid? form-login-password validate-presence)
(defv form-signup-username-valid? form-signup-username validate-presence)
(defv form-signup-password-valid? form-signup-password validate-presence)
; uncomment when go live
; valid password needs
; * 8 or more characters
; * At least 1 capital
; * At least 1 numeric
; * At least 1 special character
#_(defv form-signup-password-valid? form-signup-password (validate-regexp #"(?=^.{8,}$)(?=.*\d)(?=.*[!@#$%^&*]+)(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$"))

(defc= is-login-form-valid? (and  (:valid? form-login-password-valid?)  (:valid? form-login-username-valid?)))
(defc= is-signup-form-valid? (and  (:valid? form-signup-password-valid?)  (:valid? form-signup-username-valid?)))

(defc= login-form-data
  {:username form-login-username
   :password form-login-password})

(defc= signup-form-data
  {:username form-signup-username
   :password form-signup-password})

(defn submit-login-form [_] (create-auth-token @login-form-data))
(defn submit-signup-form [_] (add-user! @signup-form-data))

(defelem cell-input [{:keys [cell] :as attrs}]
  (let [target-value #(do! (-> % .-currentTarget) :value)]
    (input (-> attrs
               (dissoc :cell)
               (assoc :type (:type attrs "text")
                 :value cell
                 :input #(reset! cell (target-value %)))))))

(defelem form-group [{:keys [valid?] :as attrs} body]
  (let [dirty? (fn [v] (-> v nil? not))]
    ((div (dissoc attrs :valid?) body)
     :class (cell= {:form-group true
                    :has-error (and (dirty? (:value valid?)) (not (:valid? valid?)))}))))

(defelem input-control [attrs]
  ((cell-input attrs) :class {:form-control true}))

(defn message [token]
  (h4 (text (str
              (if (first token)
                (do
                (set-token (second token))
                (set! (.. js/window -location) "/news/"))
                (get (second token) :message ))))))

(defn pg []
  (news-layout/primary
    :page-title "Login | Fractalide"
    :description "Fractalide is Free Software"
    :keywords "Noware, Fractalide, Build subnets, Build mobile apps, Mobile development platform"
    :page-css "index.inc.css"
(div :class "ui grid container"
                               (div :class "ui four wide column"

                                    (h1 :class "ui header" "Login")
                                    (form :submit submit-login-form :class "ui form"
                                          (form-group :valid? form-login-username-valid?
                                                      (label "Username")
                                                      (input-control :cell form-login-username))
                                          (form-group :valid? form-login-password-valid?
                                                      (label "Password")
                                                      (input-control :cell form-login-password
                                                                     :type "password"))
                                          (div :class "ui hidden divider")
                                          (button :class "ui button"
                                                  :type "submit"
                                                  :disabled (cell= (not is-login-form-valid?))
                                                  :style "background-color: rgba(64,170,84,1);"
                                                  "Login")
                                          (message auth-token))
                                    (message add-user-reply)
                                    (h1 :class "ui header" "Create account")
                                    (form :submit submit-signup-form :class "ui form"
                                          (form-group :valid? form-signup-username-valid?
                                                      (label "Username")
                                                      (input-control :cell form-signup-username))
                                          (form-group :valid? form-signup-password-valid?
                                                      (label "Password")
                                                      (input-control :cell form-signup-password
                                                                     :type "password"))
                                          (div :class "ui hidden divider")
                                          (button :class "ui button"
                                                  :type "submit"
                                                  :disabled (cell= (not is-signup-form-valid?))
                                                  :style "background-color: rgba(64,170,84,1);"
                                                  "Create account"))))))
