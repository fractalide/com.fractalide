(ns fractalide.new-problem.index
  (:require
    [fractalide.new-problem.examples :as examples]
    [fractalide.news-layout :as news-layout]))

(defn pg []

  (defc fbp-comp
    {:name "component name"
     :desc "problem description"
     :src "src"
     :author "author"
     :inputs []
     :outputs []})

  (defc inputs
    {:input1 {:type "simple" :schema "schema1" :error "error" }
     :input2 {:type "array" :schema "schema2" :error "ok" }})
  (defc outputs
    {:output1 {:type "simple" :schema "schema1" :error "ok"}
     :output2 {:type "array" :schema "schema2" :error "error"}})

  (defn edit-port [])

  (defn port [port]
    (let [edit-port (cell true)
          port-name (cell (name (key @port)))
          port-schema (cell (get (val @port) :schema))
          port-type (cell (get (val @port) :type))
          set-port-type (fn [pt] (reset! port-type pt))
          port-positive? (fn [pt] (if (= @port-type pt) "positive" "negative"))
          error? (fn [err] (case err
                             "ok" "green"
                             "error" "red"
                             "warning" "orange"
                             "default"))
          err-colour (cell= (error? (get (val port) :error)))
          segment-colour (cell= (str "ui " err-colour " segment"))
          ]
      (div :class segment-colour
           (div :class "content"
                (div :class "ui equal width grid"
                     (div :class "equal width row"
                          (div :class "fourteen wide column"
                               (div :toggle (cell= (= edit-port false))
                                    (div
                                      (div :style "padding-bottom: 0.3em;"
                                           (cell= (div :class "mini ui floated buttons"
                                                       (button :class (str "ui "(port-positive? "simple")" button")
                                                               :click #(set-port-type "simple")
                                                               :value port-type "SIMPLE")
                                                       (div :class "or")
                                                       (button :class (str "ui "(port-positive? "array")" button ")
                                                               :click #(set-port-type "array")
                                                               :value port-type "ARRAY"))))
                                      (div :style "padding-bottom: 0.3em;"
                                           (b (input
                                                :value port-name
                                                :change #(reset! port-name @%))))
                                      (div :style "padding-bottom: 0.3em;"
                                           (textarea
                                             :value port-schema
                                             :change #(reset! port-schema @%)
                                             :rows 5))))
                               (div :toggle (cell= (= edit-port true))
                                    (div
                                      (div
                                        (b (label
                                             :text port-name))
                                        (div (label :text port-type))
                                        (pre (label
                                               :text (cell= port-schema)
                                               :rows 5))))))
                          (div :class "twe wide column"
                               (div :toggle (cell= (= edit-port false))
                                    (div :class "ui mini basic vertical icon buttons"
                                         (button :class "ui button"
                                                 :click #(reset! edit-port true)
                                                 (i :class "large edit icon"))
                                         (button :class "ui button"
                                                 (i :class "large red remove icon"))))
                               (div :toggle (cell= (= edit-port true))
                                    ;(div; :style "padding-bottom: 10em; ")
                                    (div :class "mini ui basic vertical icon centered buttons"
                                         (button :class "ui button"
                                                 :click #(reset! edit-port false)
                                                 (i :class "large edit icon"))
                                         (button :class "ui button"
                                                 (i :class "large red remove icon")))))))))))

  (defn port-list [type ports]
    (let [
          port-type (cell "simple")
          port-positive? (fn [pt] (if (= @port-type pt) "positive" "negative"))
          set-port-type (fn [pt] (reset! port-type pt))
          new-port (cell false)
          port-error (cell "ok")
          port-name (cell "")
          port-schema (cell "")
          reset-new-port (fn [] (reset! port-name "") (reset! port-schema "") (reset! port-type "simple") (reset! new-port false))
          ]
      [
       (div :class "ui segments" ;"ui styled fluid list"
            (div :class "ui segment"
                 (div :style "padding-bottom: 1em;"
                      (b (label :text (clojure.string/capitalize type) " ports"
                                (div :class "mini ui right floated button"
                                     :style "background-color: rgba(64,170,84,1);"
                                     :click #(reset! new-port true)
                                     "ADD") )))
                 (div :toggle new-port
                      [(div :class "ui raised segment"
                            (label :class "ui small header" "New " type " port ("(a :target "_blank" :href "https://capnproto.org/language.html" "help")")"
                                   (div :style "padding-bottom: 2.3em;"
                                        (cell= (div :class "mini ui right floated buttons"
                                                    (button :class (str "ui "(port-positive? "simple")" button")
                                                            :click #(set-port-type "simple")
                                                            :value port-type "SIMPLE")
                                                    (div :class "or")
                                                    (button :class (str "ui "(port-positive? "array")" button ")
                                                            :click #(set-port-type "array")
                                                            :value port-type "ARRAY")))))
                            (div :style "padding-bottom: 0.3em;"
                                 (input :class "ui input"
                                        :value port-name
                                        :change #(reset! port-name @%)
                                        :placeholder "new port name"))
                            (div :style "padding-bottom: 0.3em;"
                                 (textarea
                                   :required true
                                   :value port-schema
                                   :change #(reset! port-schema @%)
                                   :placeholder (cell= examples/capnp)
                                   :rows 5))
                            (div :style "padding-bottom: 1.9em;"
                                 (div :class "mini ui right floated button"
                                      :style "background-color: rgba(64,170,84,1);"
                                      :click #(dosync
                                                (swap! ports conj {(keyword @port-name) {:type @port-type :schema @port-schema :error @port-error}})
                                                (reset-new-port))
                                      "INSERT")
                                 (div :class "mini ui right floated button"
                                      :style "background-color: rgba(64,170,84,1);"
                                      :click #(reset-new-port)
                                      "CANCEL")))]))
            (loop-tpl :bindings [a-port ports]
                      (port a-port)))]))

  (defn component [fbp-comp]
    (let [
          component-name (cell "")
          problem-desc (cell "")
          author (cell "")])
    (div :class "ui form"
         (div :class "column"
              (div :class "ui form"
                   (div :class "ui hidden divider")
                   (h3 :text "Component name:")
                   (textarea
                     :placeholder "Use a hierarchical name similar to: \"/domain/specialty/component-name\" "
                     :required true
                     :rows 1))
              (div :class "ui hidden divider"))
         (div :class "ui equal width grid"
              (div :class "equal width row"
                   (div :class "four wide column"
                        (port-list "input" inputs))
                   (div :class "eight wide column"
                        (div :class "ui form"
                             (b (label
                                  :text "Describe the problem:"))
                             (textarea
                               :required true
                               :placeholder "Please clearly describe the problem you're facing. The community will set about implementing a component which matches these specifications. If you use the word \"and\", probably your component specification is too complex."
                               :rows 14))
                        (div :class "ui hidden divider")
                        (div :class "ui right floated button"
                             :style "background-color: rgba(64,170,84,1);"
                             "Submit"))
                   (div :class "four wide column"
                        (port-list "output" outputs))))))

  (news-layout/primary
    :page-title "New Problem | Fractalide"
    :description "Fractalide is Free Software"
    :keywords "Noware, Fractalide, Build subnets, Build mobile apps, Mobile development platform"
    :page-css "index.inc.css"
    (component fbp-comp)))

