(ns fractalide.new-problem.index
  (:require
    [fractalide.new-problem.examples :as examples]
    [fractalide.news-layout :as news-layout]
    [hoplon.storage-atom :refer [local-storage]]))

(defn pg []

  (defc fbpcomp {
                 :name ""
                 :problem-statement ""
                 :src ""
                 :author ""
                 :inputs {}
                 :outputs{}})


  (defc= comp-name (get fbpcomp :name))
  (defc= comp-src (get fbpcomp :src))
  (defc= comp-problem-statement (get fbpcomp :problem-statement))

  (defn get-ports [in-or-out?]
    (cell= (get fbpcomp in-or-out?)))
  (defn update-comp-name! [n]
    (swap! fbpcomp assoc-in [:name] n))
  (defn update-comp-src! [n]
    (swap! fbpcomp assoc-in [:src] n))
  (defn update-comp-problem-statement! [n]
    (swap! fbpcomp assoc-in [:problem-statement] n))
  (defn remove-port [in-or-out? port-key ]
    (reset! fbpcomp (update-in @fbpcomp [in-or-out?] dissoc port-key)))
  (defn add-port [in-or-out? port]
    (swap! fbpcomp assoc-in [in-or-out? (key (first port))] (val (first port))))
  (defn update-port [in-or-out? port-key port-item value]
    (if-let [is-name? (= :name port-item)]
      (let [new-key (keyword value) old-key port-key]
        (swap! fbpcomp assoc-in [in-or-out? port-key port-item] value)
        (reset! fbpcomp (update-in @fbpcomp [in-or-out?] clojure.set/rename-keys {old-key new-key})))
      (swap! fbpcomp assoc-in [in-or-out? port-key port-item] value)))

  (defn port-list [in-or-out?]
    (let [
          port-type (cell "simple")
          port-positive? (cell= (let [pn ["positive" "negative"]] (if (= port-type "simple") pn (reverse pn))))
          set-port-type (fn [pt] (reset! port-type pt))
          new-port (cell false)
          port-error (cell "ok")
          port-name (cell "")
          port-schema (cell "")
          reset-new-port (fn [] (reset! port-name "") (reset! port-schema "") (reset! port-type "simple") (reset! new-port false))
          ]
      (div :class "ui segments"
           (div :class "ui segment"
                (div :style "padding-bottom: 1em;"
                     (b (label :text (clojure.string/capitalize (name in-or-out?))
                               (div :class "mini ui right floated button"
                                    :style "background-color: rgba(64,170,84,1);"
                                    :click #(reset! new-port true)
                                    "ADD") )))
                (div :toggle new-port
                     [(div :class "ui raised segment"
                           (label :class "ui small header" "New " (name in-or-out?) " ("(a :target "_blank" :href "https://capnproto.org/language.html" "help")")"
                                  (div :style "padding-bottom: 2.3em;"
                                       (cell= (div :class "mini ui right floated buttons"
                                                   (button :class (str "ui "(first port-positive?)" button")
                                                           :click #(set-port-type "simple")
                                                           :value port-type "SIMPLE")
                                                   (div :class "or")
                                                   (button :class (str "ui "(second port-positive?)" button ")
                                                           :click #(set-port-type "array")
                                                           :value port-type "ARRAY")))))
                           (div :style "padding-bottom: 0.3em;"
                                (input :class "ui input"
                                       :value port-name
                                       :change #(reset! port-name @%)
                                       :placeholder "new port name"))
                           (div :style "padding-bottom: 0.3em;"
                                (textarea
                                  :value port-schema
                                  :change #(reset! port-schema @%)
                                  :placeholder (cell= examples/capnp)
                                  :rows 5))
                           (div :style "padding-bottom: 1.9em;"
                                (div :class "mini ui right floated button"
                                     :style "background-color: rgba(64,170,84,1);"
                                     :click #(do
                                               (add-port in-or-out?
                                                         {(keyword @port-name)
                                                          {:name @port-name
                                                           :type @port-type
                                                           :schema @port-schema
                                                           :error @port-error}})
                                               (reset-new-port))
                                     "INSERT")
                                (div :class "mini ui right floated button"
                                     :style "background-color: rgba(64,170,84,1);"
                                     :click #(reset-new-port)
                                     "CANCEL")))]))
           (loop-tpl :bindings [[port-key {
                                           port-name :name
                                           port-type :type
                                           port-schema :schema
                                           port-error :error}] (get-ports in-or-out?)]
                     (let [edit-port (cell false)
                           edit? (fn [e] (reset! edit-port e))
                           port-positive? (cell= (let [pn ["positive" "negative"]] (if (= port-type "simple") pn (reverse pn))))
                           error? (fn [err] (case err
                                              "ok" "green"
                                              "error" "red"
                                              "warning" "orange"
                                              ""))
                           err-colour (cell= (error? port-error))
                           segment-colour (cell= (str "ui " err-colour " segment"))]
                       (div :class segment-colour
                            (div :class "content"
                                 (div :class "ui equal width grid"
                                      (cell=
                                        (div :class "equal width row"
                                             (div :class "fourteen wide column"
                                                  (div :toggle (cell= (= edit-port true))
                                                       (div
                                                         (div :style "padding-bottom: 0.3em;"
                                                              (div :class "mini ui floated buttons"
                                                                   (cell= (button :class (str "ui "(first port-positive?)" button")
                                                                                  :click #(update-port in-or-out? port-key :type "simple")
                                                                                  :value port-type "SIMPLE"))
                                                                   (div :class "or")
                                                                   (cell= (button :class (str "ui "(second port-positive?)" button ")
                                                                                  :click #(update-port in-or-out? port-key :type "array")
                                                                                  :value port-type "ARRAY"))))
                                                         (div :style "padding-bottom: 0.3em;"
                                                              (input
                                                                :value port-name
                                                                :change #(update-port in-or-out? port-key :name @%)))
                                                         (div :style "padding-bottom: 0.3em;"
                                                              (textarea
                                                                :value port-schema
                                                                :change #(update-port in-or-out? port-key :schema @%)
                                                                :rows 5))))
                                                  (div :toggle (cell= (= edit-port false))
                                                       (div
                                                         (b (label (text "port name: ~{port-name}")))
                                                         (div (cell= (b (label (text "type: ~{port-type} port")))))
                                                         (div (b (label (text "schema: "))))
                                                         (pre (cell= (label
                                                                       :rows 5
                                                                       (text "~{port-schema}")))))))
                                             (div :class "twe wide column"
                                                  (div :toggle (cell= (= edit-port true))
                                                       (div :class "fluid ui mini basic vertical icon buttons"
                                                            (button :class "ui button"
                                                                    :click #(edit? false)
                                                                    (i :class "large edit icon"))
                                                            (button :class "ui button"
                                                                    :click #(remove-port in-or-out? port-key)
                                                                    (i :class "large red remove icon"))))
                                                  (div :toggle (cell= (= edit-port false))
                                                       (div :class "fluid mini ui basic vertical icon centered buttons"
                                                            (button :class "ui button"
                                                                    :click #(edit? true)
                                                                    (i :class "large edit icon"))
                                                            (button :class "ui button"
                                                                    :click #(remove-port in-or-out? port-key)
                                                                    (i :class "large red remove icon")))))))))))))))

  (defn component []
    (div :class "ui form"
         (div :class "column"
              (div :class "ui form"
                   (div :class "ui hidden divider")
                   (h3 :text "Component name:")
                   (textarea
                     :value comp-name
                     :change #(update-comp-name! @%)
                     :placeholder "Use a hierarchical name similar to: \"/domain/specialty/component-name\" "
                     :required true
                     :rows 1))
              (div :class "ui hidden divider"))
         (div :class "ui equal width grid"
              (div :class "equal width row"
                   (cell= (div :class "four wide column"
                               (port-list :inputs)))
                   (div :class "eight wide column"
                        (div :class "ui form"
                             (b (label
                                  :text "Describe the problem:"))
                             (textarea
                               :value comp-problem-statement
                               :change #(update-comp-problem-statement! @%)
                               :placeholder "Please clearly describe the problem you're facing. The community will set about implementing a component which matches these specifications. If you use the word \"and\", probably your component specification is too complex."
                               :rows 14))
                        (div :class "ui hidden divider")
                        (div :class "ui right floated button"
                             :style "background-color: rgba(64,170,84,1);"
                             "Submit"))
                   (cell= (div :class "four wide column"
                               (port-list :outputs)))))))

  (news-layout/primary
    :page-title "New Problem | Fractalide"
    :description "Fractalide is Free Software"
    :keywords "Noware, Fractalide, Build subnets, Build mobile apps, Mobile development platform"
    :page-css "index.inc.css"
    (component)))

