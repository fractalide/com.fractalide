(ns fractalide.programmer-quick-build.examples)

; separate file used to stop the editor formatter from destroying examples whitespace.

(def nand
  (code (pre
"// nand.rs "(u :style "color: red" "⓪")"
// NAND logic gate component implementation
component! { "(u :style "color: red" "①")"
    Nand, "(u :style "color: red" "②")"
    inputs(a: bool, b: bool), "(u :style "color: red" "③")"
    inputs_array(), "(u :style "color: red" "④")"
    outputs(output:bool), "(u :style "color: red" "⑤")"
    outputs_array(), "(u :style "color: red" "⑥")"
    option(), "(u :style "color: red" "⑦")"
    acc(), "(u :style "color: red" "⑧")"
    fn run(&mut self) { "(u :style "color: red" "⑨")"
        let a = self.inputs.a.recv().unwrap(); "(u :style "color: red" "⑩")"
        let b = self.inputs.b.recv().unwrap();
        let out = if a == false || b == false { true } else {false}; "(u :style "color: red" "⑪")"
        let _ = self.outputs.output.send(out).ok().expect(\"Nand: cannot send out\"); "(u :style "color: red" "⑫")"
    }
}")))

(def clonefbp
  (code (pre
"// clone.rs
// Clone component implementation
component! {
    CloneC, (T: CloneIP), "(u :style "color: red" "⓪")"
    inputs(input: T where T: CloneIP), "(u :style "color: red" "①")"
    inputs_array(),
    outputs(),
    outputs_array(output: T where T: CloneIP),
    option(),
    acc(),
    fn run(&mut self) {
        let msg = self.inputs.input.recv().unwrap();
        for out in self.outputs_array.output.values() {
            out.send(msg.clone()).ok().unwrap();
        }
    }
    pub trait CloneIP: Clone + IP {} "(u :style "color: red" "②")"
    impl <T> CloneIP for T where T: Clone + IP {}
}
")))

(def notfbp
  (code (pre
"// not.fcl "(u :style "color: red" "⓪")"
// NOT logic gate subnet implementation
in => in clone(clone) output[1] -> a nand(nand) out => out
clone() output[2] -> b nand()
")))

(def andfbp
  (code (pre
"// and.fcl
// AND logic gate subnet implementation
a => a nand(nand) out -> in not(not) out => out "(u :style "color: red" "⓪")"
b => b nand()
")))

(def orfbp
  (code (pre
"// or.fcl
// OR logic gate subnet implementation
a => in not1(not) out -> a and(and) out -> in not3(not) out => out "(u :style "color: red" "⓪")"
b => in not2(not) out -> b and()
")))

(def xorfbp
  (code (pre
"// xor.fcl
// XOR logic gate subnet implementation
a => in clone1(clone) output[1] -> a and1(and) out -> a or(or) out => out
clone1() output[2] -> in not1(not) out -> a and2(and) out -> b or(or)
b => in clone2(clone) output[1] -> in not2(not) out -> b and1()
clone2() output[2] -> b and2()
")))
