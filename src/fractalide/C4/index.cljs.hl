(ns fractalide.C4.index
  (:require
    [fractalide.layout :as layout]
    [fractalide.image :as image]))

(defn pg []
  (layout/primary
    :id "C4"
    :page-title "Collective Code Construction Contract 4.2"
    :description "Fractalide's Collaborative Development Model"
    :keywords "Fractalide, C4"
    :page-css "index.inc.css"

    (section :class "ui one column"
             (div  :id "page-title" :class "center aligned row"
                  (div :class "column"
                       (h1 "Collective Code Construction Contract 4.2"))))

    (section :class "ui one column container grid basic segment"
             (div :class "column C4-details"
                  (p "The Collective Code Construction Contract (C4) is an evolution of the github.com Fork + Pull Model,
                     aimed at providing an optimal collaboration model for free software projects. This is a fork of the
                     C4 specification.")
                  (ol
                    (li :class "C4-heading" "License"
                        (ul
                          (li "Copyright (c) 2009-2015 Pieter Hintjens.
                              This Specification is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
                              This Specification is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
                              You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses>.")))
                    (li :class "C4-heading" "Language"
                        (ul
                          (li "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.")  ))
                    (li :class "C4-heading" "Goals"
                        (ul
                          (li "C4 is meant to provide a reusable optimal collaboration model for open source software projects. It has these specific goals:")
                          (li (ul
                                (li "To maximize the scale of the community around a project, by reducing the friction for new Contributors and creating a scaled participation model with strong positive feedbacks;")
                                (li "To relieve dependencies on key individuals by separating different skill sets so that there is a larger pool of competence in any required domain;")
                                (li "To allow the project to develop faster and more accurately, by increasing the diversity of the decision making process;")
                                (li "To support the natural life cycle of project versions from experimental through to stable, by allowing safe experimentation, rapid failure, and isolation of stable code;")
                                (li "To reduce the internal complexity of project repositories, thus making it easier for Contributors to participate and reducing the scope for error;")
                                (li "To enforce collective ownership of the project, which increases economic incentive to Contributors and reduces the risk of hijack by hostile entities.")))))
                    (li :class "C4-heading" "Design"
                        (ul
                          (li :class "C4-heading" "Preliminaries"
                              (ul
                                (li "The project SHALL use the git distributed revision control system.")
                                (li "The project SHALL be hosted on github.com or equivalent, herein called the \"Platform\".")
                                (li "The project SHALL use the Platform issue tracker.")
                                (li "The project SHOULD have clearly documented guidelines for code style.")
                                (li "A \"Contributor\" is a person who wishes to provide a patch, being a set of commits that solve some clearly identified problem.")
                                (li "A \"Maintainer\" is a person who merges patches to the project. Maintainers are not developers; their job is to enforce process.")
                                (li "Contributors SHALL NOT have commit access to the repository unless they are also Maintainers.")
                                (li "Maintainers SHALL have commit access to the repository.")
                                (li "Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract.")))
                          (li :class "C4-heading" "Licensing and Ownership"
                              (ul
                                (li "The project SHALL the share-alike MPLv3 license.")
                                (li "All contributions to the project source code (\"patches\") SHALL use the same license as the project.")
                                (li "All authors with patches to the project are REQUIRED to complete the copyright assignment process.")
                                (li "The copyrights in the project SHALL be owned Noware Ltd, Hong Kong.")
                                (li "Each Contributor SHALL be responsible for identifying themselves in the project Contributor list.")))
                          (li :class "C4-heading" "Patch Requirements"
                              (ul
                                (li "Maintainers and Contributors MUST have a Platform account and SHOULD use their real names or a well-known alias.")
                                (li "A patch SHOULD be a minimal and accurate answer to exactly one identified and agreed problem.")
                                (li "A patch MUST adhere to the code style guidelines of the project if these are defined.")
                                (li "A patch MUST adhere to the \"Evolution of Public Contracts\" guidelines defined below.")
                                (li "A patch SHALL NOT include non-trivial code from other projects unless the Contributor is the original author of that code.")
                                (li "A patch MUST compile cleanly and pass project self-tests on at least the principle target platform.")
                                (li "A patch commit message SHOULD consist of a single short (less than 50 character) line summarizing the change, optionally followed by a blank line and then a more thorough description.")
                                (li "A \"Correct Patch\" is one that satisfies the above requirements.")))
                          (li :class "C4-heading" "Development Process"
                              (ul
                                (li "Change on the project SHALL be governed by the pattern of accurately identifying problems and applying minimal, accurate solutions to these problems.")
                                (li "To request changes, a user SHOULD log an issue on the project Platform issue tracker.")
                                (li "The user or Contributor SHOULD write the issue by describing the problem they face or observe.")
                                (li "The user or Contributor SHOULD seek consensus on the accuracy of their observation, and the value of solving the problem.")
                                (li "Users SHALL NOT log feature requests, ideas, suggestions, or any solutions to problems that are not explicitly documented and provable.")
                                (li "Thus, the release history of the project SHALL be a list of meaningful issues logged and solved.")
                                (li "To work on an issue, a Contributor SHALL fork the project repository and then work on their forked repository.")
                                (li "To submit a patch, a Contributor SHALL create a Platform pull request back to the project.")
                                (li "A Contributor SHALL NOT commit changes directly to the project.")
                                (li "If the Platform implements pull requests as issues, a Contributor MAY directly send a pull request without logging a separate issue.")
                                (li "To discuss a patch, people MAY comment on the Platform pull request, on the commit, or elsewhere.")
                                (li "To accept or reject a patch, a Maintainer SHALL use the Platform interface.")
                                (li "Maintainers SHOULD NOT merge their own patches except in exceptional cases, such as non-responsiveness from other Maintainers for an extended period (more than 1-2 days).")
                                (li "Maintainers SHALL NOT make value judgments on correct patches.")
                                (li "Maintainers SHALL merge correct patches from other Contributors rapidly.")
                                (li "The Contributor MAY tag an issue as \"Ready\" after making a pull request for the issue.")
                                (li "The user who created an issue SHOULD close the issue after checking the patch is successful.")
                                (li "Maintainers SHOULD ask for improvements to incorrect patches and SHOULD reject incorrect patches if the Contributor does not respond constructively.")
                                (li "Any Contributor who has value judgments on a correct patch SHOULD express these via their own patches.")
                                (li "Maintainers MAY commit changes to non-source documentation directly to the project.")))
                          (li :class "C4-heading" "Creating Stable Releases"
                              (ul
                                (li "The project SHALL have one branch (\"master\") that always holds the latest in-progress version and SHOULD always build.")
                                (li "The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches.")
                                (li "To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository.")
                                (li "Forking a project for stabilization MAY be done unilaterally and without agreement of project maintainers.")
                                (li "A stabilization project SHOULD be maintained by the same process as the main project.")
                                (li "A patch to a stabilization project declared \"stable\" SHALL be accompanied by a reproducible test case.")))
                          (li :class "C4-heading" "Evolution of Public Contracts"
                              (ul
                                (li "All Public Contracts (APIs or protocols) SHALL be documented.")
                                (li "All Public Contracts SHOULD have space for extensibility and experimentation.")
                                (li "A patch that modifies a stable Public Contract SHOULD not break existing applications unless there is overriding consensus on the value of doing this.")
                                (li "A patch that introduces new features to a Public Contract SHOULD do so using new names.")
                                (li "Old names SHOULD be deprecated in a systematic fashion by marking new names as \"experimental\" until they are stable, then marking the old names as \"deprecated\".")
                                (li "When sufficient time has passed, old deprecated names SHOULD be marked \"legacy\" and eventually removed.")
                                (li "Old names SHALL NOT be reused by new features.")
                                (li "When old names are removed, their implementations MUST provoke an exception (assertion) if used by applications.")))
                          (li :class "C4-heading" "Project Administration"
                              (ul
                                (li "The project founders SHALL act as Administrators to manage the set of project Maintainers.")
                                (li "The Administrators SHALL ensure their own succession over time by promoting the most effective Maintainers.")
                                (li "A new Contributor who makes a correct patch SHALL be invited to become a Maintainer.")
                                (li "Administrators MAY remove Maintainers who are inactive for an extended period of time, or who repeatedly fail to apply this process accurately.")
                                (li "Administrators SHOULD block or ban \"bad actors\" who cause stress and pain to others in the project. This should be done after public discussion, with a chance for all parties to speak. A bad actor is someone who repeatedly ignores the rules and culture of the project, who is needlessly argumentative or hostile, or who is offensive, and who is unable to self-correct their behavior when asked to do so by others."))))))))))
